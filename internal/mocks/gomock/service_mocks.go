// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/interface.go -destination=internal/mocks/gomock/service_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "astra-api/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthServiceInterface is a mock of AuthServiceInterface interface.
type MockAuthServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockAuthServiceInterfaceMockRecorder is the mock recorder for MockAuthServiceInterface.
type MockAuthServiceInterfaceMockRecorder struct {
	mock *MockAuthServiceInterface
}

// NewMockAuthServiceInterface creates a new mock instance.
func NewMockAuthServiceInterface(ctrl *gomock.Controller) *MockAuthServiceInterface {
	mock := &MockAuthServiceInterface{ctrl: ctrl}
	mock.recorder = &MockAuthServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceInterface) EXPECT() *MockAuthServiceInterfaceMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthServiceInterface) Authenticate(login, password string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", login, password)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthServiceInterfaceMockRecorder) Authenticate(login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthServiceInterface)(nil).Authenticate), login, password)
}

// Register mocks base method.
func (m *MockAuthServiceInterface) Register(login, password, adminToken string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", login, password, adminToken)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceInterfaceMockRecorder) Register(login, password, adminToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthServiceInterface)(nil).Register), login, password, adminToken)
}

// MockDocsServiceInterface is a mock of DocsServiceInterface interface.
type MockDocsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDocsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockDocsServiceInterfaceMockRecorder is the mock recorder for MockDocsServiceInterface.
type MockDocsServiceInterfaceMockRecorder struct {
	mock *MockDocsServiceInterface
}

// NewMockDocsServiceInterface creates a new mock instance.
func NewMockDocsServiceInterface(ctrl *gomock.Controller) *MockDocsServiceInterface {
	mock := &MockDocsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockDocsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocsServiceInterface) EXPECT() *MockDocsServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDocsServiceInterface) Create(doc *model.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDocsServiceInterfaceMockRecorder) Create(doc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDocsServiceInterface)(nil).Create), doc)
}

// Delete mocks base method.
func (m *MockDocsServiceInterface) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDocsServiceInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDocsServiceInterface)(nil).Delete), id)
}

// GetByID mocks base method.
func (m *MockDocsServiceInterface) GetByID(id string) (*model.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*model.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDocsServiceInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDocsServiceInterface)(nil).GetByID), id)
}

// List mocks base method.
func (m *MockDocsServiceInterface) List(owner string, limit int) ([]model.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", owner, limit)
	ret0, _ := ret[0].([]model.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDocsServiceInterfaceMockRecorder) List(owner, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDocsServiceInterface)(nil).List), owner, limit)
}

// MockSessionServiceInterface is a mock of SessionServiceInterface interface.
type MockSessionServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockSessionServiceInterfaceMockRecorder is the mock recorder for MockSessionServiceInterface.
type MockSessionServiceInterfaceMockRecorder struct {
	mock *MockSessionServiceInterface
}

// NewMockSessionServiceInterface creates a new mock instance.
func NewMockSessionServiceInterface(ctrl *gomock.Controller) *MockSessionServiceInterface {
	mock := &MockSessionServiceInterface{ctrl: ctrl}
	mock.recorder = &MockSessionServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionServiceInterface) EXPECT() *MockSessionServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSessionServiceInterface) Create(userID, login string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, login)
	ret0, _ := ret[0].(string)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSessionServiceInterfaceMockRecorder) Create(userID, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionServiceInterface)(nil).Create), userID, login)
}

// Delete mocks base method.
func (m *MockSessionServiceInterface) Delete(token string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", token)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSessionServiceInterfaceMockRecorder) Delete(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionServiceInterface)(nil).Delete), token)
}

// Get mocks base method.
func (m *MockSessionServiceInterface) Get(token string) (*model.Session, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", token)
	ret0, _ := ret[0].(*model.Session)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSessionServiceInterfaceMockRecorder) Get(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSessionServiceInterface)(nil).Get), token)
}

// Validate mocks base method.
func (m *MockSessionServiceInterface) Validate(token string) (model.Session, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", token)
	ret0, _ := ret[0].(model.Session)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockSessionServiceInterfaceMockRecorder) Validate(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockSessionServiceInterface)(nil).Validate), token)
}
