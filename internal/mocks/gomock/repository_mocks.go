// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/interface.go -destination=internal/mocks/gomock/repository_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "astra-api/internal/model"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface.
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface.
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance.
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepositoryInterface) Create(user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryInterfaceMockRecorder) Create(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepositoryInterface)(nil).Create), user)
}

// CreateTx mocks base method.
func (m *MockUserRepositoryInterface) CreateTx(tx *sql.Tx, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", tx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockUserRepositoryInterfaceMockRecorder) CreateTx(tx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockUserRepositoryInterface)(nil).CreateTx), tx, user)
}

// GetByID mocks base method.
func (m *MockUserRepositoryInterface) GetByID(id string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetByID), id)
}

// GetByLogin mocks base method.
func (m *MockUserRepositoryInterface) GetByLogin(login string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", login)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockUserRepositoryInterfaceMockRecorder) GetByLogin(login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetByLogin), login)
}

// MockDocumentRepositoryInterface is a mock of DocumentRepositoryInterface interface.
type MockDocumentRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockDocumentRepositoryInterfaceMockRecorder is the mock recorder for MockDocumentRepositoryInterface.
type MockDocumentRepositoryInterfaceMockRecorder struct {
	mock *MockDocumentRepositoryInterface
}

// NewMockDocumentRepositoryInterface creates a new mock instance.
func NewMockDocumentRepositoryInterface(ctrl *gomock.Controller) *MockDocumentRepositoryInterface {
	mock := &MockDocumentRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockDocumentRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentRepositoryInterface) EXPECT() *MockDocumentRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDocumentRepositoryInterface) Create(doc *model.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDocumentRepositoryInterfaceMockRecorder) Create(doc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDocumentRepositoryInterface)(nil).Create), doc)
}

// CreateTx mocks base method.
func (m *MockDocumentRepositoryInterface) CreateTx(tx *sql.Tx, doc *model.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTx", tx, doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockDocumentRepositoryInterfaceMockRecorder) CreateTx(tx, doc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockDocumentRepositoryInterface)(nil).CreateTx), tx, doc)
}

// Delete mocks base method.
func (m *MockDocumentRepositoryInterface) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDocumentRepositoryInterfaceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDocumentRepositoryInterface)(nil).Delete), id)
}

// DeleteTx mocks base method.
func (m *MockDocumentRepositoryInterface) DeleteTx(tx *sql.Tx, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTx", tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTx indicates an expected call of DeleteTx.
func (mr *MockDocumentRepositoryInterfaceMockRecorder) DeleteTx(tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTx", reflect.TypeOf((*MockDocumentRepositoryInterface)(nil).DeleteTx), tx, id)
}

// GetByID mocks base method.
func (m *MockDocumentRepositoryInterface) GetByID(id string) (*model.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*model.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDocumentRepositoryInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDocumentRepositoryInterface)(nil).GetByID), id)
}

// List mocks base method.
func (m *MockDocumentRepositoryInterface) List(owner string, limit int) ([]model.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", owner, limit)
	ret0, _ := ret[0].([]model.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDocumentRepositoryInterfaceMockRecorder) List(owner, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDocumentRepositoryInterface)(nil).List), owner, limit)
}
